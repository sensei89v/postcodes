import pytest

from src.post_codes import EnglandPostCodeWorker
from src.exceptions import ValidationError

@pytest.mark.parametrize("post_code", [
    "AB15 8AT",
    "AB42 3GT",
    "AL4 8RQ",
    "B10 9LA",
    "B11 3FQ",
    "B1 1PU",
    "B20 2RX",
    "B33 0QG",
    "B5 5RR",
    "BA1 1LF",
    "BA12 0AY",
    "BA2 0AL",
    "BA9 8BS",
    "BB12 7RH",
    "BD22 8PT",
    "BD2 3SF",
    "BD4 8PY",
    "BH14 0JB",
    "BL0 0NQ",
    "BL3 3WG",
    "BN43 5TP",
    "BN99 8HP",
    "BR6 0AZ",
    "BS31 1HG",
    "BT19 1YS",
    "CA28 7NS",
    "CB1 3UB",
    "CF48 2UH",
    "CF5 2BT",
    "CF62 8NU",
    "CF62 9TS",
    "CF63 2NH",
    "CF63 2QY",
    "CH3 5RD",
    "CM0 8LU",
    "CM12 0YS",
    "CM1 4QW",
    "CO11 1HD",
    "CO5 9RD",
    "CR0 1JB",
    "CR8 3PW",
    "CT20 2UF",
    "CV2 2LP",
    "CV47 1GN",
    "CV9 2RD",
    "CW11 1SB",
    "CW5 5BD",
    "DA10 1BS",
    "DA11 8DR",
    "DA12 3BW",
    "DA12 4HG",
    "DA7 6PF",
    "DD2 1EX",
    "DE23 6GY",
    "DE6 2LA",
    "DG11 2DY",
    "DH4 6AU",
    "DL4 1BG",
    "DN22 6LP",
    "DN5 0AA",
    "DY1 1AE",
    "DY13 9BF",
    "E1 0LN",
    "E11 2NX",
    "E1W 2PY",
    "E20 1GT",
    "E2 0NA",
    "E3 5JQ",
    "E9 5BB",
    "EC2M 4WN",
    "EC4M 7DX",
    "EH54 5BF",
    "EN8 0JX",
    "EX14 9UP",
    "FK10 1SJ",
    "FK1 2PH",
    "FK7 8ET",
    "FY8 2RD",
    "G11 6SE",
    "G1 3ED",
    "G14 0QS",
    "G15 6BS",
    "G20 7JL",
    "G76 8HH",
    "GL20 7SS",
    "GL2 9FH",
    "GU1 1YG",
    "GU5 0BB",
    "GY2 4HZ",
    "GY10 4HZ",
    "HA4 8GS",
    "HD8 9XP",
    "HG5 0TX",
    "HP22 5LT",
    "HR1 3PA",
    "HS1 2LE",
    "HU17 8NS",
    "HX3 7PL",
    "HX6 1PE",
    "IG11 8BU",
    "IM9 5PX",
    "IM99 3XQ",
    "IP16 4TZ",
    "IP7 6EH",
    "IV36 2PR",
    "IV3 8PT",
    "JE3 8DH",
    "KA13 6ER",
    "KA1 5DG",
    "KT10 0DQ",
    "KT24 6BG",
    "KW15 1BP",
    "KY16 9HW",
    "KY8 5SW",
    "L10 3JX",
    "L1 5DR",
    "L39 1QH",
    "LA1 4JP",
    "LD7 1AU",
    "LE12 9SL",
    "LL11 5DW",
    "LL53 6YS",
    "LN1 1AD",
    "LN12 2YB",
    "LS13 3BQ",
    "LU7 4QX",
    "M1 5LE",
    "M23 0HY",
    "ME19 6QT",
    "ME8 9PT",
    "MK18 1TP",
    "MK4 3DE",
    "ML11 9FD",
    "ML9 2JL",
    "N1 5HL",
    "N9 8NW",
    "NE47 7DQ",
    "NE9 7JT",
    "NG10 1EZ",
    "NG11 9LZ",
    "NG1 2JQ",
    "NG23 5QG",
    "NN16 8LP",
    "NP10 8AR",
    "NP44 5UL",
    "NR14 7LU",
    "NW10 4JB",
    "OL12 0RE",
    "OX10 9TD",
    "PA1 2QU",
    "PA5 9AZ",
    "PE11 4FB",
    "PE4 6SN",
    "PH2 9NL",
    "PL15 0AZ",
    "PO10 7DY",
    "PO33 1TN",
    "PR9 7QS",
    "RG1 4QY",
    "RG28 7JW",
    "RH10 1RD",
    "RH16 3JT",
    "RM11 2BS",
    "RM9 6XQ",
    "S10 3FN",
    "S45 0HA",
    "S98 1RN",
    "SA2 8EB",
    "SE10 8EE",
    "SE1 4YA",
    "SE17 1DJ",
    "SE19 2BW",
    "SG1 1QZ",
    "SG8 5HZ",
    "SK11 7TF",
    "SL5 9QY",
    "SN10 2UE",
    "SO51 8LA",
    "SP5 4DB",
    "SR8 4EL",
    "SS4 3AE",
    "ST14 5LU",
    "SW14 8AX",
    "SW1W 0LS",
    "SY10 1FT",
    "SY7 8DH",
    "TA24 6TS",
    "TD9 7NA",
    "TF3 2JX",
    "TN23 1NF",
    "TQ10 9JQ",
    "TR18 3BQ",
    "TS2 1HG",
    "TW13 6LB",
    "UB3 1BL",
    "W11 3BW",
    "W1H 6EF",
    "W1U 5LU",
    "W4 2RZ",
    "WA14 3JZ",
    "WA9 2HF",
    "WC1X 8DU",
    "WC2R 0JT",
    "WD25 8DT",
    "WD99 1AH",
    "WF2 9NS",
    "WF9 4NH",
    "WN6 0NX",
    "WR14 4LJ",
    "WS2 7JR",
    "WV15 6NB",
    "YO21 2JW",
    "YO8 8RT",
])
def test_valid_post_codes(post_code):
    worker = EnglandPostCodeWorker(False)
    assert worker.validate(post_code) == post_code


@pytest.mark.parametrize("post_code", [
    'AI-2640',
    'PCRN 1ZZ',
    'KY1-0002',
    'KY1-1112',
    'KY2-2002',
    'MSR-1210',
    'VG1140',
    'DV 01',
])
def test_specific_cases(post_code):
    worker = EnglandPostCodeWorker(False)
    with pytest.raises(ValidationError):
        worker.validate(post_code)

    worker = EnglandPostCodeWorker(True)
    assert post_code == worker.validate(post_code)



@pytest.mark.parametrize("post_code", [
    # Non valid format
    15,
    '',
    'WWWW1A 0AX',
    'AAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAa'
    '6152 3212',
    'NNNN NNNN',
    '3A B11',
    # fail on specific rules
    'TQ5 NNN',
    'QW1 3SA',
    'WJ43 2QQ',
    'W1I 2QQ',
    'EC1J 2QQ',
    'ME2 3CC',
    'AB2 3QQ',
    'AA0 3QQ',
    'HR11 4QQ',
    'AB3W 4QQ',
    'KY1-1210',
    'MSR-1370',
    'VG1170',
    'SB 05',
])
def test_invalid_data(post_code):
    with pytest.raises(ValidationError):
        worker = EnglandPostCodeWorker(False)
        worker.validate(post_code)

    with pytest.raises(ValidationError):
        worker = EnglandPostCodeWorker(False)
        worker.validate(post_code)


@pytest.mark.parametrize("post_code, available_result", [
    ('SK5 6LN', 'SK5 6LN'),
    ('sk5 6ln', 'SK5 6LN'),
    ('   \t   SK5 \t\n\t6LN  \n\t  ', 'SK5 6LN'),
    ('   \t   Sk5 \t\n\t6Ln  \n\t  ', 'SK5 6LN'),
    ('  Ky2-2002   ', 'KY2-2002'),
    ('PcRn    \t 1Zz \t ', 'PCRN 1ZZ'),
])
def test_formatting_data_without_special_cases(post_code, available_result):
    worker = EnglandPostCodeWorker(True)
    result = worker.validate(post_code)
    assert available_result == result
